<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>Quantum Field Explorer</title>
  <!-- Google Fonts for a modern and friendly look -->
  <link href="https://fonts.googleapis.com/css2?family=Montserrat:wght@400;700&display=swap" rel="stylesheet">
  <style>
    * { box-sizing: border-box; }
    body {
      margin: 0;
      overflow: hidden;
      background: linear-gradient(135deg, #1e3c72, #2a5298);
      font-family: 'Montserrat', sans-serif;
      color: #f0f0f0;
    }
    #overlay {
      position: absolute;
      top: 20px;
      left: 20px;
      background: rgba(0, 0, 0, 0.7);
      border: 2px solid #4CAF50;
      padding: 20px;
      border-radius: 10px;
      max-width: 500px;
      z-index: 20;
      word-wrap: break-word;
      overflow-wrap: break-word;
      white-space: normal;
    }
    #overlay h2 { margin-top: 0; color: #4CAF50; }
    #overlay p { line-height: 1.6; margin: 12px 0; }
    #overlay .equation {
      background: rgba(0, 0, 0, 0.3);
      padding: 10px;
      border-radius: 5px;
      margin: 10px 0;
    }
    /* Rest of the original styles remain the same */
    #detailed-info {
      position: absolute;
      bottom: 20px;
      left: 20px;
      background: rgba(0, 0, 0, 0.75);
      border: 2px solid #4CAF50;
      padding: 15px;
      border-radius: 10px;
      max-width: 400px;
      max-height: 40%;
      overflow-y: auto;
      z-index: 20;
      display: none;
      word-wrap: break-word;
      overflow-wrap: break-word;
      white-space: normal;
    }
    #detailed-info h3 { margin-top: 0; color: #4CAF50; }
    #toggle-info, #toggle-overlay {
      position: absolute;
      bottom: 20px;
      z-index: 30;
      background: #4CAF50;
      color: #fff;
      border: none;
      padding: 10px 15px;
      font-size: 14px;
      border-radius: 5px;
      cursor: pointer;
      transition: background 0.3s;
    }
    #toggle-info { right: 20px; }
    #toggle-overlay { right: 150px; }
    #toggle-info:hover, #toggle-overlay:hover { background: #66BB6A; }
    #gui-container {
      position: absolute;
      top: 20px;
      right: 20px;
      z-index: 20;
    }
  </style>
  <!-- Three.js Library -->
  <script src="https://cdnjs.cloudflare.com/ajax/libs/three.js/r128/three.min.js"></script>
  <!-- dat.GUI Library for interactive parameters -->
  <script src="https://cdnjs.cloudflare.com/ajax/libs/dat-gui/0.7.9/dat.gui.min.js"></script>
  <!-- MathJax for LaTeX Rendering -->
  <script>
    window.MathJax = {
      tex: { inlineMath: [['$', '$'], ['\\(', '\\)']] },
      svg: { fontCache: 'global' }
    };
  </script>
  <script src="https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-svg.js"></script>
</head>
<body>
  <!-- Updated Primary Explanation Overlay -->
  <div id="overlay">
    <h2>Quantum Field Explorer</h2>
    <p>
      Welcome to the quantum realm! Here, particles obey the laws of quantum mechanics, where probability rules and classical intuition breaks down. The state of a quantum system is described by its wavefunction \(\psi(x,y,t)\), which contains all possible information about the system.
    </p>
    <p>
      Key Quantum Equations:
    </p>
    <div class="equation">
      <p style="text-align: center;">
        Time-dependent Schrödinger equation:<br>
        $i\hbar\frac{\partial}{\partial t}\psi = -\frac{\hbar^2}{2m}\nabla^2\psi + V\psi$
      </p>
    </div>
    <div class="equation">
      <p style="text-align: center;">
        Probability density:<br>
        $P(x,y,t) = |\psi(x,y,t)|^2$
      </p>
    </div>
    <div class="equation">
      <p style="text-align: center;">
        Heisenberg Uncertainty:<br>
        $\Delta x \Delta p \geq \frac{\hbar}{2}$
      </p>
    </div>
    <p>
      In this visualization, you're watching a quantum wave packet evolve. The brightness shows the probability density |\(\psi\)|², representing where you might find the particle if you measure it.
    </p>
    <p>
      The wave packet's initial state is a Gaussian wave packet with momentum \(p\):
      $\psi(x,y,0) = A\exp\left(-\frac{(x-x_0)^2 + (y-y_0)^2}{4\sigma^2}\right)\exp\left(\frac{ipx}{\hbar}\right)$
    </p>
  </div>

  <!-- Rest of the original HTML content remains the same -->
  <div id="detailed-info">
    <h3>Discover Quantum Breakthroughs</h3>
    <ul>
      <li>
        <strong>Unified Insights:</strong> Quantum field theory bridges matter and energy, revealing a universe where particles are the result of underlying field excitations.
      </li>
      <li>
        <strong>Innovation in Computing:</strong> Dive into quantum computing and explore how superposition and entanglement redefine computational power.
      </li>
      <li>
        <strong>Precision Sensing:</strong> Learn how quantum fields enable ultra-precise measurements, transforming technologies from healthcare to navigation.
      </li>
      <li>
        <strong>Materials of the Future:</strong> Uncover how quantum mechanics guides the development of new materials with extraordinary properties.
      </li>
      <li>
        <strong>Cosmic Discoveries:</strong> Venture into research areas like dark matter and quantum gravity, paving the way for revolutionary advancements in science and technology.
      </li>
    </ul>
  </div>

  <!-- Toggle buttons -->
  <button id="toggle-overlay">Hide Explanation</button>
  <button id="toggle-info">Show More Info</button>

  <!-- Container for dat.GUI -->
  <div id="gui-container"></div>

  <!-- Original JavaScript code remains the same -->
  <script>
   // ------------------ Simulation Parameters ------------------
    const params = {
      mass: 1.0,
      potentialStrength: 5.0,
      potentialSigma: 0.2,
      dt: 0.0005,
      running: true,
      reset: function() { initSimulation(); }
    };

    // ------------------ Simulation Grid Setup ------------------
    const gridSize = 128; // grid resolution (gridSize x gridSize)
    const L = 10;         // spatial domain [-L/2, L/2]
    const dx = L / gridSize;
    let psi = [];         // 2D array of complex numbers {re, im}
    let V = [];           // potential array

    // Create coordinate arrays for potential
    function initPotential() {
      V = new Array(gridSize);
      const center = L / 2;
      for (let i = 0; i < gridSize; i++) {
        V[i] = new Array(gridSize);
        let x = i * dx;
        for (let j = 0; j < gridSize; j++) {
          let y = j * dx;
          // Gaussian barrier centered at (L/2, L/2)
          let r2 = ((x - center) ** 2 + (y - center) ** 2);
          V[i][j] = params.potentialStrength * Math.exp(-r2 / (2 * params.potentialSigma * params.potentialSigma));
        }
      }
    }

    // Initialize wavefunction: a Gaussian wave packet at left side with momentum to the right.
    function initSimulation() {
      psi = new Array(gridSize);
      for (let i = 0; i < gridSize; i++) {
        psi[i] = new Array(gridSize);
        let x = i * dx;
        for (let j = 0; j < gridSize; j++) {
          let y = j * dx;
          // Gaussian packet centered at (L/4, L/2)
          let x0 = L / 4, y0 = L / 2;
          let sigma = 0.5;
          let amplitude = Math.exp(-((x - x0) ** 2 + (y - y0) ** 2) / (2 * sigma * sigma));
          // Impart momentum in x-direction (phase factor)
          let phase = 2 * Math.PI * 1.0 * x;
          psi[i][j] = { re: amplitude * Math.cos(phase), im: amplitude * Math.sin(phase) };
        }
      }
      initPotential();
    }
    initSimulation();

    // ------------------ Three.js Setup ------------------
    const scene = new THREE.Scene();
    const camera = new THREE.OrthographicCamera(-L / 2, L / 2, L / 2, -L / 2, 0.1, 1000);
    camera.position.z = 5;
    const renderer = new THREE.WebGLRenderer({ antialias: true });
    renderer.setSize(window.innerWidth, window.innerHeight);
    document.body.appendChild(renderer.domElement);

    // Create a DataTexture to update simulation results (showing |ψ|²)
    const textureData = new Uint8Array(gridSize * gridSize * 3);
    const dataTexture = new THREE.DataTexture(textureData, gridSize, gridSize, THREE.RGBFormat);
    dataTexture.needsUpdate = true;

    // Create a plane to display the texture
    const planeGeometry = new THREE.PlaneGeometry(L, L);
    const planeMaterial = new THREE.MeshBasicMaterial({ map: dataTexture });
    const plane = new THREE.Mesh(planeGeometry, planeMaterial);
    scene.add(plane);

    // ------------------ Update Texture ------------------
    function updateTexture() {
      let maxVal = 0;
      // Compute max |ψ|² for normalization
      for (let i = 0; i < gridSize; i++) {
        for (let j = 0; j < gridSize; j++) {
          let mag2 = psi[i][j].re ** 2 + psi[i][j].im ** 2;
          if (mag2 > maxVal) maxVal = mag2;
        }
      }
      // Map |ψ|² to grayscale (0-255)
      for (let i = 0; i < gridSize; i++) {
        for (let j = 0; j < gridSize; j++) {
          let mag2 = psi[i][j].re ** 2 + psi[i][j].im ** 2;
          let intensity = Math.floor(255 * mag2 / (maxVal + 1e-10));
          let index = 3 * (j * gridSize + i);
          textureData[index] = intensity;
          textureData[index + 1] = intensity;
          textureData[index + 2] = intensity;
        }
      }
      dataTexture.needsUpdate = true;
    }

    // ------------------ Simulation Step ------------------
    // Explicit Euler update for the Schrödinger equation:
    // ψ(t+dt) = ψ(t) + dt * [ i/(2m)*Δψ - i*V ψ ]
    function laplacian(i, j) {
      // Periodic boundary conditions
      const ip = (i + 1) % gridSize;
      const im = (i - 1 + gridSize) % gridSize;
      const jp = (j + 1) % gridSize;
      const jm = (j - 1 + gridSize) % gridSize;
      const center = psi[i][j];
      const lapRe = (psi[ip][j].re + psi[im][j].re + psi[i][jp].re + psi[i][jm].re - 4 * center.re) / (dx * dx);
      const lapIm = (psi[ip][j].im + psi[im][j].im + psi[i][jp].im + psi[i][jm].im - 4 * center.im) / (dx * dx);
      return { re: lapRe, im: lapIm };
    }

    function simulationStep() {
      const newPsi = new Array(gridSize);
      for (let i = 0; i < gridSize; i++) {
        newPsi[i] = new Array(gridSize);
        for (let j = 0; j < gridSize; j++) {
          const lap = laplacian(i, j);
          const potential = V[i][j];
          const old = psi[i][j];
          // dψ/dt = i/(2m)*lap - i*potential*old
          // Multiplying by i: (a+ib)*i = -b + ia.
          const term1_re = -lap.im / (2 * params.mass);
          const term1_im = lap.re / (2 * params.mass);
          const term2_re = potential * old.im;
          const term2_im = -potential * old.re;
          newPsi[i][j] = {
            re: old.re + params.dt * (term1_re + term2_re),
            im: old.im + params.dt * (term1_im + term2_im)
          };
        }
      }
      psi = newPsi;
    }

    // ------------------ Animation Loop ------------------
    function animate() {
      requestAnimationFrame(animate);
      if (params.running) {
        simulationStep();
      }
      updateTexture();
      renderer.render(scene, camera);
    }
    animate();

    // ------------------ GUI Controls ------------------
    const gui = new dat.GUI({ autoPlace: false });
    document.getElementById('gui-container').appendChild(gui.domElement);
    gui.add(params, 'mass', 0.1, 5.0).name('Mass (m)');
    gui.add(params, 'potentialStrength', 0.0, 20.0).name('Potential Strength');
    gui.add(params, 'potentialSigma', 0.05, 1.0).name('Sigma (σ)');
    gui.add(params, 'dt', 0.0001, 0.005).name('Time Step (dt)');
    gui.add(params, 'running').name('Run Simulation');
    gui.add(params, 'reset').name('Reset Simulation');

    // ------------------ Handle Window Resize ------------------
    window.addEventListener('resize', () => {
      renderer.setSize(window.innerWidth, window.innerHeight);
    });

    // ------------------ Toggle Detailed Info ------------------
    const toggleInfoBtn = document.getElementById('toggle-info');
    const detailedInfo = document.getElementById('detailed-info');
    toggleInfoBtn.addEventListener('click', () => {
      if (detailedInfo.style.display === 'none' || detailedInfo.style.display === '') {
        detailedInfo.style.display = 'block';
        toggleInfoBtn.textContent = 'Hide Detailed Info';
      } else {
        detailedInfo.style.display = 'none';
        toggleInfoBtn.textContent = 'Show More Info';
      }
    });

    // ------------------ Toggle Primary Explanation Overlay ------------------
    const toggleOverlayBtn = document.getElementById('toggle-overlay');
    const primaryOverlay = document.getElementById('overlay');
    toggleOverlayBtn.addEventListener('click', () => {
      if (primaryOverlay.style.display === 'none' || primaryOverlay.style.display === '') {
        primaryOverlay.style.display = 'block';
        toggleOverlayBtn.textContent = 'Hide Explanation';
      } else {
        primaryOverlay.style.display = 'none';
        toggleOverlayBtn.textContent = 'Show Explanation';
      }
    });
  </script>
</body>
</html>
